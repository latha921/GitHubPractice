 try {

            if (l_querierIP.isEmpty()) {
                cdr.setAppRetCode(AppRetCodeConstants.OrigIpNotFound);
                log.info("Querier IP could not be found");
                connectionCount.decrementAndGet();
                return helper.sendValidationFailureResponse(HttpStatus.UNAUTHORIZED, Optional.of("IP Queried from is unauthorized"), xrequestIDVal);
            } else
                cdr.setCustIP(l_querierIP.get(0));

            log.info("Customer IP is {}", cdr.getCustIP());
            log.info("Customer ID is {}", l_custid);
            log.info("Error Msg is {} ", l_errMsg);

            for (String cust_id : l_custid) {
                log.info("Customer ID in loop is: ", cust_id);
                if (isAuthorized(cust_id, reqContext.getServType().getValue())) {
                    log.info("Customer is authorized !!!");
                    cdr.setCustIP(l_querierIP.get(0));
                    if ("4".equals(cust_id) || "5".equals(cust_id)) {
                        if (req_custid != null && !req_custid.isEmpty() && req_custid.chars().allMatch(Character::isDigit))
                            cust_id = req_custid;
                        else {
                            log.info("throwing exception for cust_id 4 or 5");
                            cdr.setAppRetCode(AppRetCodeConstants.CustNotFound);
                            updateCDRForFailureCase(reqContext, cdr, tn, cust_id);
                            helper.sendValidationFailureResponse(HttpStatus.BAD_REQUEST, Optional.of("Unknown Customer id: [" + cust_id + "]"), xrequestIDVal);

                        }}
                    if (log.isDebugEnabled()) log.debug("Customer ID from Authentication is: " + cust_id);

                    CustProf custProf = cacheContainer.retrieveValue(Constants.CUST_PROF, cust_id);

                    if (custProf == null) {
                        log.info("throwing exception custProf is null");
                        cdr.setAppRetCode(AppRetCodeConstants.Err);
                        updateCDRForFailureCase(reqContext, cdr, tn, cust_id);
                        log.error(LoggMessages.PFQI_10215,cust_id);
                        return helper.sendValidationFailureResponse(HttpStatus.BAD_REQUEST, Optional.of("Unknown Customer id: [" + cust_id + "]"), xrequestIDVal);
                    }
                    else if(!custProf.getPortofcallFlag().equalsIgnoreCase("y")){
                        log.info("Customer[{}] is not portOfCall, Returning 404",custProf.getCustid());
                        cdr.setAppRetCode(AppRetCodeConstants.Err);
                        updateCDRForFailureCase(reqContext, cdr, tn, cust_id);
                        return helper.sendValidationFailureResponse(HttpStatus.NOT_FOUND, Optional.of("Not found"), xrequestIDVal);
                    }
                    if (cc != null) {
                        reqContext.setQueryCc(cc);
                        //cdr.setCc(Integer.valueOf(cc));
                    }

                    log.info("query cc " + cc);
                    reqContext.setServType(ServiceTypeEnum.pf);

                    reqContext.setCustId(Integer.valueOf(cust_id));
                    reqContext.setDeducedCustomer(custProf);
                    reqContext.setPortOfCall(custProf.getPortofcallFlag().equalsIgnoreCase("y"));
                    reqContext.setQueryTn(tn);
                    reqContext.setDeducedTn(tn);

                    PerfEvent event1 = new PerfEvent();
                    event1.methodName = "pfServiceHandler.handleRequest";
                    event1.begin();
                    actualResponse = pfServiceHandler.handleRequest(reqContext, cdr);
                    event1.end();
                    event1.commit();

                    exchange.getResponse().getHeaders().remove("QUERYIP");
                    exchange.getResponse().getHeaders().remove("CUSTID");
                    exchange.getResponse().getHeaders().remove("ErrorMsg");

                    log.info("Actual response from Service Layer: " + actualResponse);
                    PerfEvent event2 = new PerfEvent();
                    event2.methodName = "Buildresponse.constructResponses";
                    event2.begin();
                    answer = BuildResponse.constructResponses(cacheContainer, actualResponse, cust_id);
                    event2.end();
                    event2.commit();
                    answer.setQueried_tn(actualResponse.getQueryTn());
                    if(cc != null && !cc.isBlank()) {
                        answer.setLocal_tn(tn);
                        answer.setCc(cc);
                    }
                    log.info("querier ip is: " + l_querierIP.get(0));


                    PerfEvent event3 = new PerfEvent();
                    event3.methodName = "CDR";
                    event3.begin();
                    setCDR(cdr, reqContext, exchange, answer, actualResponse, cc, tn, l_querierIP.get(0), xrequestIDVal);
                    //cdrLogger.info(cdr.toString());
                    cdrModelProcessing.writeCDR(cdr.toString());
                    long diff = Instant.now().toEpochMilli() - appStartTime;
                    event3.end();
                    event3.commit();
                    timer_app_latency.record(diff, TimeUnit.MILLISECONDS);
                }
            }
            if (log.isDebugEnabled())
                log.debug("Couldn't find the service {} for customer id list {}", ServiceTypeEnum.pf.getValue(), l_custid);
        } catch (Exception e) {
            cdr.setAppRetCode(AppRetCodeConstants.Err);
            updateCDRForFailureCase(reqContext, cdr, tn, req_custid);
            e.printStackTrace();
            log.error("Exception : " + e.getMessage());
            log.error(LoggMessages.PFQI_10231);
        }
        HttpHeaders httpHeader = helper.setHttpHeaders(xrequestIDVal);
        ResponseEntity<Response> res = new ResponseEntity<Response>(answer, httpHeader, HttpStatus.ACCEPTED);

        connectionCount.decrementAndGet();
        return Mono.just(res);
