import java.io.*;
import java.util.*;

public class CDRComparator {
    // Fields to ignore (based on Mapping.csv analysis)
    private static final Set<Integer> IGNORE_FIELDS = new HashSet<>(Arrays.asList(
        0, 1, 2, 10, 15, 39, 43, 44, 45, 46
    ));
    
    private static Map<Integer, String> fieldMapping = new HashMap<>();

    public static void main(String[] args) throws IOException {
        // Load field mappings from Mapping.csv
        loadFieldMappings("Mapping.csv");

        // Load and parse Java and C++ CDR files
        Map<String, List<String>> javaCDR = parseCDR("Java CDR.txt");
        Map<String, List<String>> cppCDR = parseCDR("C++ CDR.txt");

        // Compare CDRs and highlight differences
        compareCDRs(javaCDR, cppCDR);
    }

    private static void loadFieldMappings(String fileName) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        String line;
        while ((line = br.readLine()) != null) {
            String[] parts = line.split(",", 2);
            if (parts.length == 2) {
                try {
                    int fieldNumber = Integer.parseInt(parts[0].trim());
                    fieldMapping.put(fieldNumber, parts[1].trim());
                } catch (NumberFormatException ignored) {
                }
            }
        }
        br.close();
    }

    private static Map<String, List<String>> parseCDR(String fileName) throws IOException {
        Map<String, List<String>> cdrData = new LinkedHashMap<>();
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        String line;
        String currentCase = null;

        while ((line = br.readLine()) != null) {
            line = line.trim();
            if (line.toLowerCase().startsWith("case")) {
                currentCase = line.split(":")[0].trim();
                cdrData.put(currentCase, new ArrayList<>());
            } else if (currentCase != null && !line.isEmpty()) {
                String[] fields = line.split("\\|");
                List<String> filteredFields = new ArrayList<>();
                for (int i = 0; i < fields.length; i++) {
                    if (!IGNORE_FIELDS.contains(i)) {
                        filteredFields.add(fields[i]);
                    }
                }
                cdrData.put(currentCase, filteredFields);
            }
        }
        br.close();
        return cdrData;
    }

    private static void compareCDRs(Map<String, List<String>> javaCDR, Map<String, List<String>> cppCDR) {
        System.out.println("\nComparison of Java and C++ CDRs:");
        System.out.println("----------------------------------------------------------------------------------------------");
        System.out.printf("%-10s %-10s %-30s %-30s %-15s%n", "Case", "Field No", "Java CDR", "C++ CDR", "Field Name");
        System.out.println("----------------------------------------------------------------------------------------------");

        for (String caseNum : javaCDR.keySet()) {
            if (cppCDR.containsKey(caseNum)) {
                List<String> javaFields = javaCDR.get(caseNum);
                List<String> cppFields = cppCDR.get(caseNum);

                for (int i = 0; i < Math.min(javaFields.size(), cppFields.size()); i++) {
                    String javaVal = javaFields.get(i);
                    String cppVal = cppFields.get(i);

                    if (!javaVal.equals(cppVal)) { // Only print differences
                        String fieldName = fieldMapping.getOrDefault(i + 1, "Unknown Field"); // Field numbers start from 1
                        System.out.printf("%-10s %-10d %-30s %-30s %-15s%n", caseNum, i + 1, javaVal, cppVal, fieldName);
                    }
                }
            } else {
                System.out.printf("%-10s %-10s %-30s %-30s %-15s%n", caseNum, "N/A", "PRESENT", "MISSING", "N/A");
            }
        }
        System.out.println("----------------------------------------------------------------------------------------------");
    }
}
