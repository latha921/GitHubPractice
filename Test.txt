Week - 3


public void checkRegionAccess(ReqContext reqContext,OutNrsGetData outData) throws NoRegionAccessException {
		String countryCode = reqContext.getDeducedCc();
		Long custId = reqContext.getCustId();
		CBM cbm = reqContext.getBlockData();
		CustProf custProf = reqContext.getDeducedCustomer();
		boolean doEtnoDip = isEtnoDipRequired(custProf, reqContext);
		int blkRegionId  = Integer.parseInt(cbm.getRegionid());
		int dbRegionId = outData.getRegionId();
		boolean isCanadianTn  = dbRegionId == 7 ||(dbRegionId < 0  && blkRegionId == 7);
		if(reqContext.isType1Override()) {
			reqContext.setRegionAccess(true);
		} else if(reqContext.isNpacSupported() ){
			if((dbRegionId >=0 && !isNpacAvailableForRegion(countryCode,custId.intValue(),dbRegionId) )||
					(dbRegionId <  0 && !isNpacAvailableForRegion(countryCode,custId.intValue(),blkRegionId))){
				if(!doEtnoDip || isCanadianTn){
					reqContext.setQstat(Qstat.Q_STAT_NO_REGION_ACCESS);
					reqContext.setNpdi(false);
					throw new NoRegionAccessException("No region available");
				}
				reqContext.setRegionAccess(false);

			}
			else{
				reqContext.setRegionAccess(true);
			}
		}
	}



public getDataEtnoOut  processTollFreeNumber(ReqContext reqContext,long custId, String countryCode) throws InvalidTnLengthException, TollFreeErrorException, SQLException {
		String searchTn = reqContext.getSearchTn();
		String npa = searchTn.substring(0,3);
		Set<String> allowed8xxSet = appConfig.getAllowed8xxSet();
		if(allowed8xxSet != null && allowed8xxSet.contains(npa)) {
			CustProf custProf = reqContext.getDeducedCustomer();
			if (custProf != null && custProf.getTollFreeFlag().equalsIgnoreCase("y")) {
				int tollFreeNumberLength = appConfig.getTollFreeNumberLength();
				int tnLength = reqContext.getTnLength();
				if (tnLength < tollFreeNumberLength) {
					reqContext.setQstat(Qstat.Q_STAT_TN_INVALID_MIN_LENGTH);
					throw new InvalidTnLengthException("Invalid toll free tn length ");
				} else if (tnLength > tollFreeNumberLength) {
					reqContext.setQstat(Qstat.Q_STAT_TN_INVALID_MAX_LENGTH);
					throw new InvalidTnLengthException("Invalid tolld free tn length");
				}
				getDataEtnoIn inData = new getDataEtnoIn(custId,countryCode,searchTn,false,"-1",false,false,false,true);
				return callGetDataEtno(reqContext,inData);
			}
		}
		return null;
	}

----------
import org.mockito.Mock;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import java.sql.SQLException;

import static org.mockito.Mockito.*;

public class AccessVerificationTest {

    @Mock
    private ReqContext reqContext;

    @Mock
    private OutNrsGetData outData;

    @Mock
    private CBM cbm;

    @Mock
    private CustProf custProf;

    @Mock
    private AppConfig appConfig;

    @InjectMocks
    private MyClassUnderTest myClassUnderTest;

    @BeforeMethod
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test(expectedExceptions = NoRegionAccessException.class)
    public void testCheckRegionAccess_NoRegionAccessException() throws NoRegionAccessException {
        when(reqContext.getDeducedCc()).thenReturn("US");
        when(reqContext.getCustId()).thenReturn(123L);
        when(reqContext.getBlockData()).thenReturn(cbm);
        when(cbm.getRegionid()).thenReturn("7");
        when(outData.getRegionId()).thenReturn(-1);
        when(reqContext.isNpacSupported()).thenReturn(true);
        when(myClassUnderTest.isEtnoDipRequired(custProf, reqContext)).thenReturn(false);

        myClassUnderTest.checkRegionAccess(reqContext, outData);

        verify(reqContext).setQstat(Qstat.Q_STAT_NO_REGION_ACCESS);
        verify(reqContext).setNpdi(false);
    }

    @Test
    public void testCheckRegionAccess_RegionAccessGranted() throws NoRegionAccessException {
        when(reqContext.getDeducedCc()).thenReturn("US");
        when(reqContext.getCustId()).thenReturn(123L);
        when(reqContext.getBlockData()).thenReturn(cbm);
        when(cbm.getRegionid()).thenReturn("5");
        when(outData.getRegionId()).thenReturn(5);
        when(reqContext.isNpacSupported()).thenReturn(true);
        when(myClassUnderTest.isEtnoDipRequired(custProf, reqContext)).thenReturn(true);

        myClassUnderTest.checkRegionAccess(reqContext, outData);

        verify(reqContext).setRegionAccess(true);
    }

    @Test(expectedExceptions = InvalidTnLengthException.class)
    public void testProcessTollFreeNumber_InvalidTnLength_MinLength() throws Exception {
        String searchTn = "8001234567";
        long custId = 123L;
        String countryCode = "US";
        int tollFreeNumberLength = 10;

        when(reqContext.getSearchTn()).thenReturn(searchTn);
        when(appConfig.getAllowed8xxSet()).thenReturn(Set.of("800"));
        when(reqContext.getDeducedCustomer()).thenReturn(custProf);
        when(custProf.getTollFreeFlag()).thenReturn("y");
        when(appConfig.getTollFreeNumberLength()).thenReturn(tollFreeNumberLength);
        when(reqContext.getTnLength()).thenReturn(9);

        myClassUnderTest.processTollFreeNumber(reqContext, custId, countryCode);
    }

    @Test
    public void testProcessTollFreeNumber_ValidTnLength() throws Exception {
        String searchTn = "8001234567";
        long custId = 123L;
        String countryCode = "US";
        int tollFreeNumberLength = 10;

        when(reqContext.getSearchTn()).thenReturn(searchTn);
        when(appConfig.getAllowed8xxSet()).thenReturn(Set.of("800"));
        when(reqContext.getDeducedCustomer()).thenReturn(custProf);
        when(custProf.getTollFreeFlag()).thenReturn("y");
        when(appConfig.getTollFreeNumberLength()).thenReturn(tollFreeNumberLength);
        when(reqContext.getTnLength()).thenReturn(10);

        getDataEtnoIn expectedInput = new getDataEtnoIn(custId, countryCode, searchTn, false, "-1", false, false, false, true);

        myClassUnderTest.processTollFreeNumber(reqContext, custId, countryCode);

        verify(myClassUnderTest).callGetDataEtno(eq(reqContext), eq(expectedInput));
    }

    @Test(expectedExceptions = TollFreeErrorException.class)
    public void testProcessTollFreeNumber_TollFreeErrorException() throws Exception {
        String searchTn = "9001234567";
        long custId = 123L;
        String countryCode = "US";

        when(reqContext.getSearchTn()).thenReturn(searchTn);
        when(appConfig.getAllowed8xxSet()).thenReturn(Set.of("800"));

        myClassUnderTest.processTollFreeNumber(reqContext, custId, countryCode);
    }
}
-----------------------------



public void hasCountryAccess(ReqContext reqContext){
		if(reqContext.isOnboardData()){
			if(!reqContext.isLnpEnabled()){
					reqContext.setQstat(Qstat.Q_STAT_NO_INT_COUNTRY_ACCESS);
			}
		}
		else {
			if(reqContext.isExtCtryAllowed()){
				reqContext.setQstat(Qstat.Q_STAT_NO_EXT_COUNTRY_ACCESS);
			}
		}
	}

	public void checkCc1Portability(ReqContext reqContext){
		CBM cbm = reqContext.getBlockData();
		if(cbm!=null && cbm.getNpEnabled() != null &&  !cbm.getNpEnabled().equalsIgnoreCase("y")){
			if(!checkCc1NpEnabled(reqContext)){
				reqContext.setQstat(Qstat.Q_STAT_NP_CORRECTION_NOT_SUPPORTED);
				reqContext.setNpdi(false);
			}
			else{
				reqContext.setQstat(Qstat.Q_STAT_NPDI_BLK_NOT_PORTABLE_COUNTRY_PORTABLE);
			}
		}
	}

	public void checkRowPortability(ReqContext reqContext){
		CBM cbm = reqContext.getBlockData();
		if(cbm!=null && cbm.getNpEnabled() != null &&  !cbm.getNpEnabled().equalsIgnoreCase("y")){
			if(!checkRowNpEnabled(reqContext)){
				reqContext.setQstat(Qstat.Q_STAT_NP_CORRECTION_NOT_SUPPORTED);
				reqContext.setNpdi(false);
			}
			else{
				reqContext.setQstat(Qstat.Q_STAT_NPDI_BLK_NOT_PORTABLE_COUNTRY_PORTABLE);
			}
		}
	}

	public boolean checkCc1NpEnabled(ReqContext reqContext) {
		String countryCode = reqContext.getDeducedCc();
		String searchTn  = reqContext.getTnToSearch();
		String npa = searchTn.substring(0,3);
		String searchKey = countryCode+":"+npa;
		Cc1Country cc1Country  = cacheContainer.retrieveValue(Constants.CC1_COUNTRY,searchKey);
		if(cc1Country != null ){
			String npEnable = cc1Country.getNpEnabled();
			return npEnable.equalsIgnoreCase("y");
		}
		return false;
	}
